# Custom U-Boot environment

# This script is invoked from the built-in u-boot script.

#
# Nerves variables
#

nerves_fw_active=a

# Use U-Boot's "upgrade_available" feature to revert back to previous firmware
# images on updates. When "upgrade_available" is set to 1, U-Boot will start
# counting reboots and once they exceed "bootlimit", it will run "altbootcmd"
# to revert back to a known good image.
#
# Nerves uses the "nerves_fw_validated" variable to track this, so set it for
# backwards compatibility.
#
# This is the factory image, so it's implicitly valid.
nerves_fw_validated=1
upgrade_available=0

# U-Boot keeps track of the boot count in the environment. This initializes
# it's boot counter feature for failing back updates. Setting it to "0" will
# cause U-Boot to set it to "1" on the first boot. If it's set to "0" after
# boot, the U-Boot bootcount option isn't working.
bootcount=0

# Try the new image once. This used to be a higher number due to a random
# kernel panic, but that hasn't been seen on OrangePiZero3.
bootlimit=1

# The nerves initialization logic
#
# The nerves_init code is run at boot (see the last line of the file). It
# checks whether this is a first boot or not. If it's not the first boot, then
# the firmware better be validated or it reverts to running the firmware on
# the opposite partition.
nerves_revert=\
    if test ${nerves_fw_active} = "a"; then\
        echo "Reverting to partition B";\
        setenv nerves_fw_active "b";\
    else\
        echo "Reverting to partition A";\
        setenv nerves_fw_active "a";\
    fi;\
    setenv nerves_fw_validated 1;\
    setenv bootcount 0;\
    setenv upgrade_available 0;\
    saveenv

nerves_init=\
    if test ${nerves_fw_active} = "a"; then\
        setenv fit_block 0x900;\
    else\
        setenv fit_block 0x8900;\
    fi

#
# Silence U-boot
#
# This turns off all prints in U-Boot
#silent=1

#
# Linux commandline:
#
# earlyprintk               - add this if the kernel isn't booting
# quiet                     - limit kernel prints to the console
# console=ttyS0,115200      - send kernel prints to UART header
cmdline=console=ttyS0,115200

fit_addr=0x4F000000
fit_cnt=0x8000

mmcargs=mmc dev 1;setenv bootargs ${cmdline}

mmc_loadfit=mmc read ${fit_addr} ${fit_block} ${fit_cnt}

common_boot=run nerves_init mmcargs mmc_loadfit;bootm ${fit_addr}

bootm_size=0xa000000

# Normal boot
bootcmd=run common_boot

# Too many reboots without validation so revert
altbootcmd=run nerves_revert common_boot
